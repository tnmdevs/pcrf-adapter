<?php

namespace TNM\PCRF\Tests\Unit\Subscription;

use TNM\PCRF\Responses\PCRFResponse;
use TNM\PCRF\Services\Subscription\SubscriptionClient;
use TNM\PCRF\Tests\TestCase;

class PCRFResponseTest extends TestCase
{
    private PCRFResponse $response;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->makePCRFRequest();
    }

    public function testStatus()
    {
        $this->assertEquals(0, $this->response->status());
    }

    public function testNotSuccessful()
    {
        $this->assertFalse($this->response->notSuccessful());
    }

    public function testHasNoContent()
    {
        $this->assertFalse($this->response->hasNoContent());
    }

    public function testGetBody()
    {
        $this->assertEquals(["result" => [
            "resultCode" => "0",
            "paras" => [
                "key" => "errorDescription",
                "value" => "Operation succeeded"
            ]]], $this->response->getBody());
    }

    public function testToString()
    {
        $this->assertEquals(file_get_contents(__DIR__ . '/response.xml'), $this->response->toString());
    }

    public function testGetContents()
    {
        $this->assertEquals([
            "resultCode" => "0",
            "paras" => [
                "key" => "errorDescription",
                "value" => "Operation succeeded"
            ]], $this->response->getContents());
    }

    public function testArray()
    {
        $this->assertEquals([
            "Body" => [
                "subscribeServiceResponse" => [
                    "result" => [
                        "resultCode" => "0",
                        "paras" => [
                            "key" => "errorDescription",
                            "value" => "Operation succeeded"
                        ]
                    ]
                ]
            ]], $this->response->array());
    }

    public function testHasContent()
    {
        $this->assertTrue($this->response->hasContent());
    }

    public function testSuccess()
    {
        $this->assertTrue($this->response->success());
    }

    public function testGetMessage()
    {
        $this->assertEquals('Operation succeeded', $this->response->getMessage());
    }

    private function makePCRFRequest()
    {
        \Http::fake(['*' => \Http::response(file_get_contents(__DIR__ . '/response.xml'))]);

        $this->response = (new SubscriptionClient('0888800900', 123456, now()->addMonth()))->query();
    }
}
